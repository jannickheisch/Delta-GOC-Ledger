#!/bin/bash

# Usage: token-ackFrom <repo-path> <token-type> <sender-id> <amount>
#
# repo-path: absolute path of the author repository
# token-type: hash of the token
# sender-id: the author id of the sender
# amount: the number of tokens that should be burned
#
#
# Acknowledges all received tokens from the given sender, which are not already acknowledged.
# 
# Exists with exit code 0 on success or exit code 1 on error. If all received tokens are already acknowledged, exit code 2 is returned.

SCRIPTDIR="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
REPO_PATH=$1
TOKEN_TYPE=$2
SENDER_ID=$3
EMPTY_TREE="4b825dc642cb6eb9a060e54bf8d69288fbee4904"

# check input arguments
if test ! -d $REPO_PATH; then
    echo "Invalid repo path '$REPO_PATH'" >&2
    exit 1
fi

cd $REPO_PATH
AUTHOR_ID="$(git config goc.author.id)"

if [ -z $AUTHOR_ID ]; then
    echo "The repository misses goc.author.id" >&2
    exit 1
fi

if [ "$(git cat-file -t $TOKEN_TYPE 2>/dev/null)" = "commit" ]; then
    if [ "$(git show -s --format=%p $TOKEN_TYPE | wc -w)" -ne 0 ]; then
        echo "Token Type '$TOKEN_TYPE' unknown." >&2
    fi
else
    echo "Token Type '$TOKEN_TYPE' unknown." >&2
fi

account_checkpoint=$($SCRIPTDIR/account-checkpoint $REPO_PATH $TOKEN_TYPE $AUTHOR_ID 2>/dev/null)
sender_checkpoint=$($SCRIPTDIR/account-checkpoint $REPO_PATH $TOKEN_TYPE $SENDER_ID 2>/dev/null)

# calculate unackedFrom
unacked=0
sender_give_to_tree="$(git ls-tree $sender_checkpoint giveTo 2>/dev/null | awk '{print $3}')"
sender_give_to_blob=""


if [ ! -z $sender_give_to_tree ] && [ $sender_give_to_tree != $EMPTY_TREE ]; then
    sender_give_to_blob=$(git ls-tree $sender_give_to_tree $AUTHOR_ID | awk '{print $3}')
fi
receiver_ack_from_tree="$(git ls-tree $account_checkpoint ackFrom 2>/dev/null | awk '{print $3}')"
receiver_ack_from_blob=""
if [ ! -z $receiver_ack_from_tree ] && [ $receiver_ack_from_tree != $EMPTY_TREE ]; then
    
    receiver_ack_from_blob=$(git ls-tree $receiver_ack_from_tree $SENDER_ID | awk '{print $3}')
fi

if [ ! -z $sender_give_to_blob ] && [ ! -z $receiver_ack_from_blob ]; then
    give_to_amount=$(git cat-file -p $sender_give_to_blob)
    ack_from_amount=$(git cat-file -p $receiver_ack_from_blob)
    unacked=$(python3 -c "print($give_to_amount - $ack_from_amount)")
elif [ ! -z $sender_give_to_blob ]; then
    give_to_amount=$(git cat-file -p $sender_give_to_blob)
    unacked=$give_to_amount
fi # else unacked stays 0

if [ $(python3 -c "print($unacked == 0)") = "True" ]; then
    echo "All received tokens from '$SENDER_ID' are currently acknowledged" >&2
    exit 2
fi

# calculate ackFrom

if [ -z $receiver_ack_from_blob ]; then
    give_to_amount=$(git cat-file -p $sender_give_to_blob)
    new_ack_from_amount=$give_to_amount
else
    give_to_amount=$(git cat-file -p $sender_give_to_blob)
    ack_from_amount=$(git cat-file -p $receiver_ack_from_blob)
    new_ack_from_amount=$(python3 -c "print(max($give_to_amount, $ack_from_amount))")
fi


# construct updated commit tree
blob=$(echo $new_ack_from_amount | git hash-object --stdin -w)
new_ack_from_tree=$(echo -e $($SCRIPTDIR/utility/ls-tree-format -b $blob:$SENDER_ID) | git mktree)

tree_str="$($SCRIPTDIR/utility/ls-tree-format -t $new_ack_from_tree:ackFrom)"
tree=$(echo -e $tree_str | git mktree)

# commit
parents=""
if git show-ref --quiet --verify refs/heads/frontier/$TOKEN_TYPE/$AUTHOR_ID; then
    parents="-p refs/heads/frontier/$TOKEN_TYPE/$AUTHOR_ID"
else
    parents="-p $TOKEN_TYPE"
fi
parents="$parents -p refs/heads/frontier/$TOKEN_TYPE/$SENDER_ID"

# debug message (if enabled)
commit_msg=""
if [ "$(git config --bool goc.debug)" = "true" ]; then
    commit_msg="ackFrom($TOKEN_TYPE/$AUTHOR_ID, $TOKEN_TYPE/$SENDER_ID)"
fi

commit=$(echo "$commit_msg" | GIT_COMMITTER_NAME="$AUTHOR_ID" GIT_AUTHOR_NAME="$AUTHOR_ID" GIT_COMMITTER_EMAIL="" GIT_AUTHOR_EMAIL="" git commit-tree -S $tree $parents)
git update-ref "refs/heads/frontier/$TOKEN_TYPE/$AUTHOR_ID" "$commit"

echo "Acknowledged $unacked tokens of type '$TOKEN_TYPE' received from '$SENDER_ID'"